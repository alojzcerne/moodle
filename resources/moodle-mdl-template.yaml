---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: moodle
  namespace: moodle-sys
  annotations:
    description: "Moodle"
parameters:
  - description: URL domain
    name: HOST
    required: true
  - description: Template ID
    name: TEMPLATE_ID
    required: true
  - description: Full name
    name: FULL_NAME 
    required: true
  - description: Short name
    name: SHORT_NAME 
    required: true
  - description: Container version
    name: TAG 
    required: true
    value: latest
labels:
  app: mdleapp
  mdle/id: ${SHORT_NAME}
  mdle: ''
objects:
  - apiVersion: v1
    kind: Namespace
    metadata:
      name: mdl-${SHORT_NAME}
  - apiVersion: v1
    kind: Secret
    type: kubernetes.io/basic-auth
    metadata:
      name: mdledb-admin
      namespace: mdl-${SHORT_NAME}
    stringData:
      password: 1pass
      pgpass: mdledb-cluster-rw:5432:*:postgres:1pass
      username: postgres
  - apiVersion: v1
    kind: Secret
    type: kubernetes.io/basic-auth
    metadata:
      name: mdledb-app
      namespace: mdl-${SHORT_NAME}
    stringData:
      username: mdleuser
      password: mdlepwdtst150  
  - apiVersion: objectbucket.io/v1alpha1
    kind: ObjectBucketClaim
    metadata:
      name: mdledb-cluster-backup
      namespace: mdl-${SHORT_NAME}
    spec:
      additionalConfig:
        bucketclass: noobaa-default-bucket-class
      bucketName: mdledb-cluster-backup-${SHORT_NAME}
      storageClassName: openshift-storage.noobaa.io
  - apiVersion: postgresql.k8s.enterprisedb.io/v1
    kind: Cluster
    metadata:
      name: mdledb-cluster
      namespace: mdl-${SHORT_NAME}
    spec:
      instances: 3
      superuserSecret:
        name: mdledb-admin
#     imageName: quay.io/enterprisedb/postgresql:16
#     imageName: quay.io/enterprisedb/postgresql:17
      imageName: quay.io/enterprisedb/edb-postgres-advanced:16.8-ubi9
#     imageName: quay.io/enterprisedb/edb-postgres-advanced:17
#     imageName: quay.io/enterprisedb/edb-postgres-advanced:17-ubi9
      bootstrap:
        initdb:
          database: mdledb
          owner: mdleuser
          encoding: 'UTF8'
          secret:
            name: mdledb-app
      storage:
        resizeInUseVolumes: true
        storageClass: ocs-storagecluster-ceph-rbd
        size: 2Gi   
      walStorage:
        resizeInUseVolumes: true
        size: 1Gi
        storageClass: ocs-storagecluster-ceph-rbd
      backup:
        retentionPolicy: 5d
        barmanObjectStore:
          destinationPath: s3://mdledb-cluster-backup-${SHORT_NAME}/prod
          endpointURL: http://s3.openshift-storage
          s3Credentials:
            accessKeyId:
              name: mdledb-cluster-backup
              key: AWS_ACCESS_KEY_ID
            secretAccessKey:
              name: mdledb-cluster-backup
              key: AWS_SECRET_ACCESS_KEY
          wal:
            compression: gzip
      resources:
        requests:
          cpu: 100m
          memory: 1Gi
  - apiVersion: postgresql.k8s.enterprisedb.io/v1
    kind: ScheduledBackup
    metadata:
      name: mdledb-cluster-backup-schedule
      namespace: mdl-${SHORT_NAME}
    spec:
      schedule: "0 0 0 * * *"
      immediate: true
      cluster:
        name: mdledb-cluster
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        app: mdleapp
      name: mdleapp-config
      namespace: mdl-${SHORT_NAME}
    data:
      MOODLE_HOST: ${HOST}
      MOODLE_TEMPLATE_ID: ${TEMPLATE_ID}
      MOODLE_FULL_NAME: ${FULL_NAME}
      MOODLE_SHORT_NAME: ${SHORT_NAME}
      MOODLE_USERNAME: admin
      MOODLE_PASSWORD: ;5jy$.*[+_C@whb%P@
      MOODLE_EMAIL: cdiul-sys@uni-lj.si
      MOODLE_DATABASE_TYPE: pgsql
      MOODLE_DATABASE_HOST: mdledb-cluster-rw
      MOODLE_DATABASE_PORT_NUMBER: "5432"
      MOODLE_DATABASE_NAME: mdledb
      MOODLE_DATABASE_USER: mdleuser
      MOODLE_DATABASE_PASSWORD: mdlepwdtst150 
      GIT_CRED_REPO: moodle:glpat-mwSRsezzyETsqYHs_a4x
      GIT_CRED_CONF: moodle:glpat-mwSRsezzyETsqYHs_a4x
      GIT_CRED_UTLS: moodle:glpat--_rVFqMKK7Kn2yNzFzoG
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: mdleapp
      name: mdleapp
      namespace: mdl-${SHORT_NAME}
    spec:
      lookupPolicy:
        local: true
      tags:
      - annotations:
          openshift.io/imported-from: central-quay-registry.apps.cdiul-iso.uni-lj.si/moodle/moodle:${TAG}
        from:
          kind: DockerImage
          name: central-quay-registry.apps.cdiul-iso.uni-lj.si/moodle/moodle:${TAG}
        importPolicy:
          importMode: Legacy
        name: latest
        referencePolicy:
          type: Source
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: mdlestorage
      namespace: mdl-${SHORT_NAME}
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 2G
      storageClassName: ocs-storagecluster-cephfs
      volumeMode: Filesystem
  - apiVersion: batch/v1
    kind: Job
    metadata:
      labels:
        app: mdleapp
      namespace: mdl-${SHORT_NAME}
      name: mdleinit
    spec:
      ttlSecondsAfterFinished: 300
      template:
        metadata:
          labels:
            app: mdleapp
            mdle/id: ${SHORT_NAME}
            mdle: ''
          name: mdleinit
        spec:
          containers:
            - name: mdleinit
              envFrom:
                - configMapRef:             
                    name: mdleapp-config
              image: mdleapp
              command:
                - /bin/bash
                - /usr/local/bin/mdle_init.sh
              resources:
                requests:
                  cpu: 100m
                  memory: 150Mi
              volumeMounts:
                - mountPath: /moodle
                  name: mdlestorage
              env:
              - name: TZ
                value: Europe/Ljubljana
          volumes:
            - name: mdlestorage
              persistentVolumeClaim:
                claimName: mdlestorage   
          restartPolicy: Never
          
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        image.openshift.io/triggers: "[{\"from\":{\"kind\":\"ImageStreamTag\",\"name\":\"mdleapp:latest\"},\"fieldPath\":\"spec.template.spec.containers[?(@.name==\\\"mdleapp\\\")].image\"}]"
      labels:
        app: mdleapp
      name: mdleapp
      namespace: mdl-${SHORT_NAME}
    spec:
      replicas: 2
      selector:
        matchLabels:
          deployment: mdleapp
      template:
        metadata:
          labels:
            mdle: ''
            app: mdleapp
            mdle/id: ${SHORT_NAME}
            deployment: mdleapp
        spec:
          containers:
          - envFrom:
              - configMapRef:
                  name: mdleapp-config
            image: ' '
            name: mdleapp
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
            ports:
            - containerPort: 8080
              protocol: TCP
            volumeMounts:
            - mountPath: /moodle
              name: mdlestorage
            env:
            - name: TZ
              value: Europe/Ljubljana
          volumes:
          - name: mdlestorage
            persistentVolumeClaim:
              claimName: mdlestorage   
  - apiVersion: policy/v1
    kind: PodDisruptionBudget
    metadata:
      labels:
        app: mdleapp
      name: mdleapp
      namespace: mdl-${SHORT_NAME}
    spec:
      minAvailable: 1
      selector:
        matchLabels:
          deployment: mdleapp
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: mdleapp
      name: mdleapp
      namespace: mdl-${SHORT_NAME}
    spec:
      ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        deployment: mdleapp
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      annotations:
        haproxy.router.openshift.io/timeout: 10m
      labels:
        app: mdleapp
      name: mdleapp
      namespace: mdl-${SHORT_NAME}
    spec:
      host: ${HOST}
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: mdleapp
      tls:
        termination: edge
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: deny-by-default
      namespace: mdl-${SHORT_NAME}
    spec:
      podSelector: {}
      ingress: []
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-from-openshift-ingress
      namespace: mdl-${SHORT_NAME}
    spec:
      ingress:
      - from:
        - namespaceSelector:
            matchLabels:
              policy-group.network.openshift.io/ingress: ""
      podSelector: {}
      policyTypes:
      - Ingress
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-from-openshift-monitoring
      namespace: mdl-${SHORT_NAME}
    spec:
      ingress:
      - from:
        - namespaceSelector:
            matchLabels:
              network.openshift.io/policy-group: monitoring
      podSelector: {}
      policyTypes:
      - Ingress
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-same-namespace
      namespace: mdl-${SHORT_NAME}
    spec:
      podSelector:
      ingress:
      - from:
        - podSelector: {}
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-from-kube-apiserver-operator
      namespace: mdl-${SHORT_NAME}
    spec:
      ingress:
      - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: openshift-kube-apiserver-operator
          podSelector:
            matchLabels:
              app: kube-apiserver-operator
      policyTypes:
      - Ingress
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-edb-operator
      namespace: mdl-${SHORT_NAME}
    spec:
      podSelector:
        matchLabels:
          postgresql: mdledb-cluster
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  kubernetes.io/metadata.name: openshift-operators
              podSelector:
                matchLabels:
                  app.kubernetes.io/name: cloud-native-postgresql # Matches the Operator pod
          ports:
            - port: 8000
            - port: 5432
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: allow-pgadmin
      namespace: mdl-${SHORT_NAME}
    spec:
      podSelector:
        matchLabels:
          k8s.enterprisedb.io/cluster: mdledb-cluster
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  kubernetes.io/metadata.name: moodle-sys
              podSelector:
                matchLabels:
                  deployment: pgadmin
          ports:
            - port: 5432
